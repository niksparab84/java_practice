package org.nikhil.examples.systemDesignQuestions.high_transaction_database_writes;

-- blocking queue for Database writes
A Blocking Queue for database writes is a common and effective pattern used in high-transaction systems to decouple the write operation from the immediate processing of a transaction,
enabling higher throughput and better resilience.
Instead of directly writing to the database within the main transaction flow, the write request is placed onto a blocking queue. A separate set of consumer threads then picks up items from
this queue and performs the actual database writes.

Why Use a Blocking Queue for Database Writes?
- Decoupling & Asynchronicity:
Main Benefit: The primary advantage is that the producing threads (e.g., handling user requests) don't have to wait for the potentially slower database write operation to complete.
They can quickly enqueue the data and move on, improving the responsiveness of the application and enabling higher request throughput.
Reduced Latency: For the user-facing part of the system, the perceived latency for a transaction is reduced because the database commit is no longer on the critical path.

- Load Smoothing / Throttling:
Databases have a finite capacity for writes. A sudden surge in write requests (a "burst") can overwhelm the database, leading to slow queries, timeouts, and potentially crashes.
A blocking queue acts as a buffer. It smooths out these bursts by holding excess write requests during peak times and allowing the consumer threads to process them at a rate the database can comfortably handle.
This prevents the database from becoming a bottleneck and protects it from overload.

- Resilience & Fault Tolerance:
If the database goes down temporarily, the producers can continue to enqueue write requests (up to the queue's capacity). Once the database recovers, the consumer threads can resume processing the backlog.
This provides a buffer against transient database failures, preventing data loss and service interruption on the producer side.
For critical applications, the queue can be made persistent (e.g., using a message broker like Kafka, RabbitMQ or a dedicated persistent queue) to survive application restarts or server crashes.

- Batching Writes:
Consumer threads can be designed to pull multiple items from the queue and perform batch inserts/updates into the database. Batch operations are significantly more efficient than individual row operations,
reducing network overhead and database transaction costs. This can dramatically improve the effective write throughput to the database.

- Simplified Error Handling/Retries:
When a write operation fails (e.g., due to a database constraint violation or connection issue), the consumer thread can handle it independently of the main application flow.
Errors in database writes can be handled more robustly by the dedicated consumer threads. They can implement retry logic, move failed items to a dead-letter queue or log errors without impacting
the main application flow.

*** How it Works (Conceptual Design) ***
- Producer Threads (Application Servers):
When an application needs to write data to the database, it creates a "write request object" (e.g., a DTO representing the data to be saved or the operation to perform).
It then puts this object onto the BlockingQueue.
If the queue is full, the put() operation will block until space becomes available (this is the "blocking" aspect), providing backpressure to the producers.

- Blocking Queue:
A thread-safe, concurrent queue implementation (e.g., ArrayBlockingQueue, LinkedBlockingQueue in Java).
Its size should be carefully considered based on expected load and desired buffering capacity.

- Consumer Threads (Database Writers):
A pool of dedicated threads (e.g. managed by an ExecutorService) continuously take() (or poll()) items from the BlockingQueue.
The take() operation will block if the queue is empty, waiting for new items.
When an item is retrieved, the consumer thread performs the actual database write operation (insert, update, delete).
Important: These threads should handle database connection management, transaction management and robust error handling (retries, logging, dead-lettering).